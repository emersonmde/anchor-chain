var searchIndex = new Map(JSON.parse('[\
["anchor_chain",{"doc":"Anchor Chain","t":"CCCCCCCCFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGPPPPPNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNOONNNNNNPFGPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCFFFFNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNPPPFFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNRFKRNNNNNNNNNNNNMNNNNNNFNNNNNNNONNNNONHNNNNNFNNNNNNNNNNNNNNNNN","n":["chain","error","link","message","models","node","parallel_node","prompt","Chain","ChainBuilder","LinkedChainBuilder","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","from","from","from","init","init","init","into","into","into","into_shared","into_shared","into_shared","link","link","new","new","process","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","AnchorChainError","BedrockError","EmptyResponseError","OpenAIError","RequestError","TeraTemplateError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","init","into","into_shared","source","to_string","try_from","try_into","try_into","type_id","vzip","Link","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","into_shared","new","next","node","process","try_from","try_into","try_into","type_id","vzip","Assistant","AssistantChatMessage","ChatMessage","User","UserChatMessage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","init","init","init","into","into","into","into_shared","into_shared","into_shared","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","claude_3","openai","Claude3Bedrock","ClaudeImageSource","ClaudeMessage","ClaudeMessageContent","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","content","content_type","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","init","init","init","init","into","into","into","into","into_shared","into_shared","into_shared","into_shared","new","process","role","serialize","serialize","serialize","source","text","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","GPT3_5Turbo","GPT3_5TurboInstruct","GPT4Turbo","OpenAIChatModel","OpenAIInstructModel","OpenAIModel","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","into_shared","into_shared","into_shared","new_gpt3_5_turbo","new_gpt3_5_turbo_instruct","new_gpt4_turbo","new_with_key","new_with_key","process","process","process","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Input","NoOpNode","Node","Output","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","from","init","into","into_shared","new","process","process","try_from","try_into","try_into","type_id","vzip","ParallelNode","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","function","init","into","into_shared","new","nodes","process","to_boxed_future","try_from","try_into","try_into","type_id","vzip","Prompt","borrow","borrow_mut","deref","deref_mut","drop","fmt","from","init","into","into_shared","new","process","try_from","try_into","try_into","type_id","vzip"],"q":[[0,"anchor_chain"],[8,"anchor_chain::chain"],[61,"anchor_chain::error"],[89,"anchor_chain::link"],[109,"anchor_chain::message"],[156,"anchor_chain::models"],[158,"anchor_chain::models::claude_3"],[247,"anchor_chain::models::openai"],[306,"anchor_chain::node"],[329,"anchor_chain::parallel_node"],[350,"anchor_chain::prompt"],[368,"core::marker"],[369,"core::marker"],[370,"core::fmt"],[371,"core::future::future"],[372,"alloc::boxed"],[373,"core::pin"],[374,"core::any"],[375,"async_openai::error"],[376,"tera::errors"],[377,"serde_json::error"],[378,"aws_sdk_bedrockruntime::operation::invoke_model"],[379,"aws_sdk_bedrockruntime::error"],[380,"core::error"],[381,"core::option"],[382,"alloc::string"],[383,"serde::de"],[384,"serde::ser"],[385,"async_openai::types::chat"],[386,"core::convert"],[387,"async_openai::types::chat"],[388,"alloc::vec"],[389,"core::ops::function"]],"d":["Provides structures for creating and executing chains.","Defines error types for Anchor Chain.","A link in a processing chain that connects one <code>Node</code> to …","Contains generic message types that can be used with …","Contains nodes that are designed to work with various LLM …","Module providing foundational structures for building …","Provides a structure for processing input through multiple …","Module for handling dynamic prompts in processing chains.","Represents a chain of nodes that can asynchronously …","A builder for constructing a <code>Chain</code> of nodes.","A builder for constructing a <code>Chain</code> of nodes using Link.","","","","","","","Finalizes the construction of the chain, returning a <code>Chain</code> …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Adds the first node to the chain.","Adds a new node to the chain, linking it to the previous …","Creates a new <code>ChainBuilder</code> instance.","Creates a new <code>Chain</code> from the provided initial link.","Asynchronously processes the provided input through the …","","","","","","","","","","","","","","","","Defines errors types for Anchor Chain","Occurs when failing to construct or invoke a model in …","Error when no response is returned from the LLM model.","Occurs when failing to construct OpenAI prompts, messages …","Generic error that occurs when processing a request.","Error constructing or rendering Tera templates.","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","A link in a processing chain that connects one <code>Node</code> to …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates a new <code>Link</code> connecting the specified nodes.","The next node or link in the chain.","The first node in the chain.","Processes the given input through the chain of nodes.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Module for interfacing with Claude 3 via AWS Bedrock.","Module for integrating OpenAI models.","A processor for integrating Claude 3 LLM processing within …","Represents a source of an image to be processed by Claude …","Represents a message to be sent to Claude 3, comprising …","Defines the content of a message for Claude 3, …","","","","","","","","","","","","","","","A vector of content items within the message.","The content type, e.g., “text”.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Constructs a new <code>Claude3Bedrock</code> processor with the …","Processes the input through the Claude 3 model, returning …","The role of the message, e.g., “user”.","","","","An image source, if applicable.","The actual text content, if applicable.","","","","","","","","","","","","","","","","","","","","","","","","GPT-3.5 Turbo model","GPT-3.5 Turbo Instruct model","GPT-4 Turbo model","Represents a processor for sending and processing requests …","Node for making requests to OpenAI Instruct models.","OpenAI model types supported by the <code>OpenAI</code> node","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Constructs a GPT3.5 Turbo model with the specified system …","Constructs a GPT3.5 Turbo Instruct model.","Constructs a GPT4 Turbo model with the specified system …","Constructs a new <code>OpenAI</code> node using the specified API key.","Constructs a new <code>OpenAI</code> processor with a specified API key.","Sends the input to the OpenAI API and processes the …","Sends the input to the OpenAI API and processes the …","Sends the prompt to the OpenAI model and processes the …","","","","","","","","","","","","","","","","The input type for the node.","A no-op node that passes input through unchanged.","Represents a node that can process an input to produce an …","The output type for the node.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates a new <code>NoOpNode</code>.","Asynchronously processes the given input, returning the …","Returns the input unchanged.","","","","","","A node that processes input through multiple nodes in …","","","","","","","Returns the argument unchanged.","The function to process the output of the nodes.","","Calls <code>U::from(self)</code>.","","Creates a new <code>ParallelNode</code> with the provided nodes and …","The nodes that will process the input in parallel.","Processes the given input through nodes in parallel.","Converts a function into a <code>BoxFuture</code> that can be used in a …","","","","","","A processor for handling text prompts within a processing …","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates a new <code>Prompt</code> processor with the specified template.","Processes the input HashMap and returns the rendered …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,8,1,2,8,1,2,1,8,8,1,2,8,1,2,8,1,2,2,8,1,2,8,1,2,8,1,2,8,1,2,8,1,8,2,2,8,1,2,8,8,1,1,2,2,8,1,2,8,1,2,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,35,0,0,35,0,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,36,34,35,35,36,36,34,34,35,36,34,35,36,34,0,0,0,0,0,0,33,29,30,31,33,29,30,31,29,30,31,29,30,31,31,30,33,29,30,31,33,29,30,31,29,30,31,33,29,30,31,33,29,30,31,33,29,30,31,31,31,31,33,29,30,31,33,29,30,31,33,29,30,31,33,33,31,29,30,31,30,30,29,30,31,33,29,30,31,33,33,29,29,30,30,31,31,33,29,30,31,33,29,30,31,42,42,42,0,0,0,38,39,42,38,39,42,38,39,42,38,39,42,38,39,42,38,39,42,38,39,42,38,39,42,38,39,42,38,39,42,42,42,42,38,39,38,39,42,38,39,42,38,38,39,39,42,42,38,39,42,38,39,42,4,0,0,4,44,44,44,44,44,44,44,44,44,44,44,44,4,44,44,44,44,44,44,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,45,45,45,45,45,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49],"f":"```````````{ce{}{}}00000{{{b{ce}}}{{d{ce}}}f{h{h{}{{j{c}}}}fln}}{{}A`}{Abc{}}00000{AbAd}00{{{d{ceg}}Af}Ahnnn}{cc{}}00{{}Ab}00777777{{A`e}{{b{ce}}}f{{h{}{{j{c}}}}fln}}{{{b{ce}}g}{{b{c{Aj{eg}}}}}f{{h{}{{j{c}}}}fln}{{h{}{{j{}}}}fln}}7{g{{d{ceg}}}nn{{h{}{{j{c}}{Al{e}}}}fln}}{{{d{ceg}}c}{{B`{eAn}}}nn{{h{}{{j{c}}{Al{e}}}}fln}}{c{{B`{e}}}{}{}}000{c{{Bf{{Bd{Bb}}}}}{}}0101{cBh{}}00>>>``````>>;;:{{AnAf}Ah}0{BjAn}{BlAn};{BnAn}{{{Cb{C`}}}An}<{ce{}{}}0{An{{Cf{Cd}}}}{cCh{}}:9:82`22{Abc{}}0{AbAd}{{{Aj{ce}}Af}Ah{nn}{nn}}{cc{}}{{}Ab}77{{ce}{{Aj{ce}}}nn}``{{{Aj{ce}}g}{{Bf{{Bd{Bb}}}}}{hfln}{{h{}{{j{}}}}fln}{}}{c{{B`{e}}}{}{}}{c{{Bf{{Bd{Bb}}}}}{}}1{cBh{}}<`````<<<<<<999999888666555<<<<<<222211221000<<<``````<<<<<<<<{CjCj}{ClCl}{CnCn}{{ce}Ad{}{}}00``========{c{{B`{Cj}}}D`}{c{{B`{Cl}}}D`}{c{{B`{Cn}}}D`}????{{DbAf}Ah}{{CjAf}Ah}{{ClAf}Ah}{{CnAf}Ah}{cc{}}00{DdCn}{DfCn}2{DhCn}{{}Ab}000{ce{}{}}0000000{ChDb}{{Dbc}{{Bf{{Bd{Bb}}}}}{}}`{{Cjc}B`Dj}{{Clc}B`Dj}{{Cnc}B`Dj}``555{c{{B`{e}}}{}{}}000{c{{Bf{{Bd{Bb}}}}}{}}1100110{cBh{}}0008888``````888888{Abc{}}00000{AbAd}00{{{Dl{c}}Af}Ah{}}{{{Dn{c}}Af}Ah{{Eb{E`}}}}{{{Ed{c}}Af}Ah{{Eb{E`}}n}}{cc{}}00???>>>>>>{Ch{{Ed{c}}}{{Eb{E`}}}}{{}{{Ed{c}}}{{Eb{E`}}}}1{{ChChCh}{{Dl{c}}}{}}{{ChCh}{{Dn{c}}}{{Eb{E`}}}}{{{Dl{c}}e}{{Bf{{Bd{Bb}}}}}{{Eb{Ef}}fl}{}}{{{Dn{c}}e}{{Bf{{Bd{Bb}}}}}{{Eb{E`}}fl}{}}{{{Ed{c}}e}{{Bf{{Bd{Bb}}}}}{fln{Eb{E`}}{Eb{Ef}}}{}}???>??>>?==={ce{}{}}00````00{{}{{Eh{c}}}{}}>>={{{Eh{c}}Af}Ahn}:{{}Ab}332{{{h{}{{j{c}}{Al{e}}}}c}{{Bf{{Bd{Bb}}}}}{}{}}{{{Eh{c}}e}{{Bf{{Bd{Bb}}}}}{fln}{}}{c{{B`{e}}}{}{}}0{c{{Bf{{Bd{Bb}}}}}{}}{cBh{}}8`88{Abc{}}0{AbAd}{{{Ej{ce}}Af}Ah{nElfl}{nfl}}{cc{}}`9<<{{{En{{Bd{h}}}}{Bd{F`}}}{{Ej{ce}}}{Elfl}{fl}}`{{{Ej{ce}}g}{{Bf{{Bd{Bb}}}}}{Elfln}{fln}{}}{e{{Bd{F`}}}f{{F`{c}{{Al{{B`{ChAn}}}}}}flEl}}9897?`??665{{FbAf}Ah}4={ce{}{}}0{FdFb}{{Fbc}{{Bf{{Bd{Bb}}}}}{}}==<;2","c":[],"p":[[5,"LinkedChainBuilder",8],[5,"Chain",8],[10,"Send",368],[10,"Node",306],[17,"Input"],[10,"Sync",368],[10,"Debug",369],[5,"ChainBuilder",8],[1,"usize"],[1,"unit"],[5,"Formatter",369],[8,"Result",369],[5,"Link",89],[17,"Output"],[6,"AnchorChainError",61],[6,"Result",370],[10,"Future",371],[5,"Box",372],[5,"Pin",373],[5,"TypeId",374],[6,"OpenAIError",375],[5,"Error",376],[5,"Error",377],[6,"InvokeModelError",378],[8,"SdkError",379],[10,"Error",380],[6,"Option",381],[5,"String",382],[5,"ClaudeImageSource",158],[5,"ClaudeMessageContent",158],[5,"ClaudeMessage",158],[10,"Deserializer",383],[5,"Claude3Bedrock",158],[5,"AssistantChatMessage",109],[6,"ChatMessage",109],[5,"UserChatMessage",109],[10,"Serializer",384],[5,"OpenAIChatModel",247],[5,"OpenAIInstructModel",247],[6,"Prompt",385],[10,"Into",386],[6,"OpenAIModel",247],[6,"ChatCompletionRequestUserMessageContent",385],[5,"NoOpNode",306],[5,"ParallelNode",329],[10,"Clone",387],[5,"Vec",388],[10,"Fn",389],[5,"Prompt",350],[1,"str"]],"b":[[72,"impl-Debug-for-AnchorChainError"],[73,"impl-Display-for-AnchorChainError"],[74,"impl-From%3COpenAIError%3E-for-AnchorChainError"],[75,"impl-From%3CError%3E-for-AnchorChainError"],[77,"impl-From%3CError%3E-for-AnchorChainError"],[78,"impl-From%3CSdkError%3CInvokeModelError,+Response%3E%3E-for-AnchorChainError"],[200,"impl-From%3CAssistantChatMessage%3E-for-ClaudeMessage"],[201,"impl-From%3CChatMessage%3E-for-ClaudeMessage"],[203,"impl-From%3CUserChatMessage%3E-for-ClaudeMessage"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
