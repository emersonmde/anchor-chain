var searchIndex = new Map(JSON.parse('[\
["anchor_chain",{"doc":"Anchor Chain: A Rust Framework for Large Language Models …","t":"CCCCCCCFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNOONNNNNNFPGPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCFFFFNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNRKRFNNNNNNNMNNNNNNFNNNONNNONNNNNNFNNNNNNNNNNNN","n":["chain","link","message","models","node","parallel_node","prompt","Chain","ChainBuilder","LinkedChainBuilder","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","build","default","from","from","from","into","into","into","into_shared","into_shared","into_shared","link","link","new","new","new","new_with_trace","process","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Link","borrow","borrow_mut","from","into","into_shared","new","next","node","process","try_from","try_into","try_into","type_id","vzip","AssisnantChatMessage","Assistant","ChatMessage","User","UserChatMessage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_shared","into_shared","into_shared","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","claude_3","gpt_3_5_turbo","Claude3Bedrock","ClaudeImageSource","ClaudeMessage","ClaudeMessageContent","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","content","content_type","deserialize","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into_shared","into_shared","into_shared","into_shared","new","process","role","serialize","serialize","serialize","source","text","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Gpt3_5Turbo","borrow","borrow_mut","from","into","into_shared","new","new_with_key","process","try_from","try_into","try_into","type_id","vzip","Input","Node","Output","PassthroughNode","borrow","borrow_mut","default","from","into","into_shared","new","process","process","try_from","try_into","try_into","type_id","vzip","ParallelNode","borrow","borrow_mut","from","function","into","into_shared","new","nodes","process","try_from","try_into","try_into","type_id","vzip","Prompt","borrow","borrow_mut","from","into","into_shared","new","process","try_from","try_into","try_into","type_id","vzip"],"q":[[0,"anchor_chain"],[7,"anchor_chain::chain"],[49,"anchor_chain::link"],[64,"anchor_chain::message"],[99,"anchor_chain::models"],[101,"anchor_chain::models::claude_3"],[173,"anchor_chain::models::gpt_3_5_turbo"],[187,"anchor_chain::node"],[205,"anchor_chain::parallel_node"],[220,"anchor_chain::prompt"],[233,"core::marker"],[234,"core::marker"],[235,"core::result"],[236,"core::future::future"],[237,"alloc::boxed"],[238,"core::pin"],[239,"core::any"],[240,"serde::de"],[241,"core::fmt"],[242,"core::fmt"],[243,"serde::ser"],[244,"alloc::vec"],[245,"core::ops::function"],[246,"core::clone"]],"d":["Provides structures for creating and executing chains.","","","","Module providing foundational structures for building …","Parallel Node","Module for handling dynamic prompts in processing chains.","Represents a chain of nodes that can asynchronously …","","A builder for constructing a <code>Chain</code> of nodes.","","","","","","","Finalizes the construction of the chain, returning a <code>Chain</code> …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Adds a new node to the chain, linking it to the previous …","Creates a new <code>Chain</code> from the provided initial link.","","Initializes a new <code>ChainBuilder</code> with the provided starting …","","Asynchronously processes the provided input through the …","","","","","","","","","","","","","","","","A link in a processing chain that connects one <code>Node</code> to …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>Link</code> connecting the specified nodes.","The next node or link in the chain.","The first node in the chain.","Processes the given input through the chain of nodes.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Module for interfacing with Claude 3 via AWS Bedrock.","Module for integrating GPT-3.5 Turbo model interactions.","A processor for integrating Claude 3 LLM processing within …","Represents a source of an image to be processed by Claude …","Represents a message to be sent to Claude 3, comprising …","Defines the content of a message for Claude 3, …","","","","","","","","","","","","","","","A vector of content items within the message.","The content type, e.g., “text”.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Constructs a new <code>Claude3Bedrock</code> processor with the …","Processes the input through the Claude 3 model, returning …","The role of the message, e.g., “user”.","","","","An image source, if applicable.","The actual text content, if applicable.","","","","","","","","","","","","","","","","","","","","","","","","Represents a processor for sending and processing requests …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new <code>Gpt3_5Turbo</code> processor with the default …","Constructs a new <code>Gpt3_5Turbo</code> processor with a specified …","Asynchronously sends the input to the GPT-3.5 Turbo model …","","","","","","The input type for the node.","Represents an node that can process an input to produce an …","The output type for the node.","A no-op node that passes input through unchanged.","","","Creates a default <code>PassthroughNode</code>.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>PassthroughNode</code>.","Asynchronously processes the given input, returning the …","Passes the input through unchanged.","","","","","","","","","Returns the argument unchanged.","The function to process the output of the nodes.","Calls <code>U::from(self)</code>.","","Creates a new <code>ParallelNode</code> with the provided nodes and …","The nodes that will process the input in parallel.","Processes the given input through nodes in parallel.","","","","","","A processor for handling text prompts within a processing …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>Prompt</code> processor with the specified text.","Processes the input by simply logging the prompt text and …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,2,7,1,2,7,1,1,7,2,7,1,2,7,1,2,7,1,7,1,2,7,1,7,2,2,7,1,2,2,7,7,1,1,2,7,1,2,7,1,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,26,0,26,0,26,25,24,26,25,24,26,25,24,26,25,24,26,25,24,26,25,24,26,26,25,25,24,24,26,25,24,26,25,24,0,0,0,0,0,0,28,17,18,19,28,17,18,19,17,18,19,17,18,19,19,18,17,18,19,17,18,19,28,17,18,19,19,19,19,28,17,18,19,28,17,18,19,28,28,19,17,18,19,18,18,17,18,19,28,17,18,19,28,28,17,17,18,18,19,19,28,17,18,19,28,17,18,19,0,30,30,30,30,30,30,30,30,30,30,30,30,30,4,0,4,0,31,31,31,31,31,31,31,4,31,31,31,31,31,31,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,37,37,37,37,37,37,37,37,37,37,37,37],"f":"``````````{ce{}{}}00000{{{b{ce}}}{{d{ce}}}f{h{h{}{{j{c}}}}fl}}{{}n}{cc{}}00333333{{ne}{{b{ce}}}f{{h{}{{j{c}}}}fl}}{{{b{ce}}g}{{b{c{A`{eg}}}}}f{{h{}{{j{c}}}}fl}{{h{}{{j{}}}}fl}}{{gAb}{{d{ceg}}}{}{}{{h{}{{j{c}}{Ad{e}}}}fl}}4{{eAb}{{b{ce}}}f{{h{}{{j{c}}}}fl}}5{{{d{ceg}}c}{{Af{e}}}{}{}{{h{}{{j{c}}{Ad{e}}}}fl}}{c{{Ah{e}}}{}{}}000{c{{An{{Al{Aj}}}}}{}}1001{cB`{}}00;;;`;;8;;{{ce}{{A`{ce}}}{}{}}``{{{A`{ce}}g}{{An{{Al{Aj}}}}}{hfl}{{h{}{{j{}}}}fl}{}}4342=`````======:::======444344334222===``````========{BbBb}{BdBd}{BfBf}{{ce}Bh{}{}}00``{c{{Ah{Bb}}}Bj}{c{{Ah{Bd}}}Bj}{c{{Ah{Bf}}}Bj}{{BbBl}Bn}{{BdBl}Bn}{{BfBl}Bn}{cc{}}00{C`Bf}{CbBf}2{CdBf}{ce{}{}}0000000{CfCh}{{Chc}{{An{{Al{Aj}}}}}{}}`{{Bbc}AhCj}{{Bdc}AhCj}{{Bfc}AhCj}``555{c{{Ah{e}}}{}{}}000{c{{An{{Al{Aj}}}}}{}}1100110{cB`{}}0008888`88<88{CfCl}{{CfCf}Cl}{{Clc}{{An{{Al{Aj}}}}}{}}5543;````;;{{}{{Cn{c}}}{}}{cc{}}==1{{{h{}{{j{c}}{Ad{e}}}}c}{{An{{Al{Aj}}}}}{}{}}{{{Cn{c}}e}{{An{{Al{Aj}}}}}{fl}{}}9897?`??2`??{{{D`{{Al{h}}}}e}{{Db{gce}}}{fl}{{Dd{{D`{c}}}{{Ad{{Af{c}}}}}}}{Dffl}}`{{{Db{ceg}}i}{{An{{Al{Aj}}}}}{Dffl}{fl}{{Dd{{D`{e}}}{{Ad{{Af{e}}}}}}fl}{}};:;9{ce{}{}}`00500{DhDj}{{Djc}{{An{{Al{Aj}}}}}{}}>=><2","c":[],"p":[[5,"LinkedChainBuilder",7],[5,"Chain",7],[10,"Send",233],[10,"Node",187],[17,"Input"],[10,"Sync",233],[5,"ChainBuilder",7],[5,"Link",49],[1,"bool"],[17,"Output"],[8,"Result",234],[6,"Result",235],[10,"Future",236],[5,"Box",237],[5,"Pin",238],[5,"TypeId",239],[5,"ClaudeImageSource",101],[5,"ClaudeMessageContent",101],[5,"ClaudeMessage",101],[1,"unit"],[10,"Deserializer",240],[5,"Formatter",241],[8,"Result",241],[5,"AssisnantChatMessage",64],[5,"UserChatMessage",64],[6,"ChatMessage",64],[5,"String",242],[5,"Claude3Bedrock",101],[10,"Serializer",243],[5,"Gpt3_5Turbo",173],[5,"PassthroughNode",187],[5,"Vec",244],[5,"ParallelNode",205],[10,"Fn",245],[10,"Clone",246],[1,"str"],[5,"Prompt",220]],"b":[[130,"impl-From%3CAssisnantChatMessage%3E-for-ClaudeMessage"],[131,"impl-From%3CUserChatMessage%3E-for-ClaudeMessage"],[133,"impl-From%3CChatMessage%3E-for-ClaudeMessage"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
