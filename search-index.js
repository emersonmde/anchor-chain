var searchIndex = new Map(JSON.parse('[\
["anchor_chain",{"doc":"Anchor Chain: A Rust Framework for Large Language Models …","t":"CCCCCFFNNNNNNNNNNNNNNNNNNNNNNNNNFPGPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCFFFFNNNNNNNNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNONNNOONNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNFRFKRNNNNNNNNNNOOMNNNNNNNNNNNNFNNNNNNNNNNNN","n":["chain","message","models","node","prompt","Chain","ChainBuilder","borrow","borrow","borrow_mut","borrow_mut","build","from","from","into","into","into_shared","into_shared","link","new","new","process","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","vzip","vzip","AssisnantChatMessage","Assistant","ChatMessage","User","UserChatMessage","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_shared","into_shared","into_shared","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","claude_3","gpt_3_5_turbo","Claude3Bedrock","ClaudeImageSource","ClaudeMessage","ClaudeMessageContent","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","content","content_type","deserialize","deserialize","deserialize","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","into_shared","into_shared","into_shared","into_shared","new","process","role","serialize","serialize","serialize","source","text","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Gpt3_5Turbo","borrow","borrow_mut","from","into","into_shared","new","new_with_key","process","try_from","try_into","try_into","type_id","vzip","End","Input","Link","Node","Output","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_shared","into_shared","next","node","process","process","process","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","vzip","vzip","Prompt","borrow","borrow_mut","from","into","into_shared","new","process","try_from","try_into","try_into","type_id","vzip"],"q":[[0,"anchor_chain"],[5,"anchor_chain::chain"],[32,"anchor_chain::message"],[67,"anchor_chain::models"],[69,"anchor_chain::models::claude_3"],[141,"anchor_chain::models::gpt_3_5_turbo"],[155,"anchor_chain::node"],[185,"anchor_chain::prompt"],[198,"core::marker"],[199,"core::marker"],[200,"core::result"],[201,"core::future::future"],[202,"alloc::boxed"],[203,"core::pin"],[204,"core::any"],[205,"serde::de"],[206,"core::fmt"],[207,"core::fmt"],[208,"serde::ser"]],"d":["Provides structures for creating and executing chains.","","","Module providing foundational structures for building …","Module for handling dynamic prompts in processing chains.","Represents a chain of nodes that can asynchronously …","A builder for constructing a <code>Chain</code> of nodes.","","","","","Finalizes the construction of the chain, returning a <code>Chain</code> …","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Adds a new node to the chain, linking it to the previous …","Creates a new <code>Chain</code> from the provided initial link.","Initializes a new <code>ChainBuilder</code> with the provided starting …","Asynchronously processes the provided input through the …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Module for interfacing with Claude 3 via AWS Bedrock.","Module for integrating GPT-3.5 Turbo model interactions.","A processor for integrating Claude 3 LLM processing within …","Represents a source of an image to be processed by Claude …","Represents a message to be sent to Claude 3, comprising …","Defines the content of a message for Claude 3, …","","","","","","","","","","","","","","","A vector of content items within the message.","The content type, e.g., “text”.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Constructs a new <code>Claude3Bedrock</code> processor with the …","Processes the input through the Claude 3 model, returning …","The role of the message, e.g., “user”.","","","","An image source, if applicable.","The actual text content, if applicable.","","","","","","","","","","","","","","","","","","","","","","","","Represents a processor for sending and processing requests …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Constructs a new <code>Gpt3_5Turbo</code> processor with the default …","Constructs a new <code>Gpt3_5Turbo</code> processor with a specified …","Asynchronously sends the input to the GPT-3.5 Turbo model …","","","","","","Represents the end of a processing chain.","The input type for the node.","A link in a processing chain that connects one <code>Node</code> to …","Represents an node that can process an input to produce an …","The output type for the node.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","The next node or link in the chain.","The first node in the chain.","Asynchronously processes the given input, returning the …","Processes the given input through the chain of nodes.","Processes the given input by simply returning it unchanged.","","","","","","","","","","","A processor for handling text prompts within a processing …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>Prompt</code> processor with the specified text.","Processes the input by simply logging the prompt text and …","","","","",""],"i":[0,0,0,0,0,0,0,2,1,2,1,1,2,1,2,1,2,1,1,2,1,2,2,1,2,2,1,1,2,1,2,1,0,24,0,24,0,24,23,22,24,23,22,24,23,22,24,23,22,24,23,22,24,23,22,24,24,23,23,22,22,24,23,22,24,23,22,0,0,0,0,0,0,26,15,16,17,26,15,16,17,15,16,17,15,16,17,17,16,15,16,17,15,16,17,26,15,16,17,17,17,17,26,15,16,17,26,15,16,17,26,26,17,15,16,17,16,16,15,16,17,26,15,16,17,26,26,15,15,16,16,17,17,26,15,16,17,26,15,16,17,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,4,0,0,4,7,29,7,29,7,29,7,29,7,29,7,7,4,7,29,7,29,7,7,29,29,7,29,7,29,0,31,31,31,31,31,31,31,31,31,31,31,31],"f":"```````{ce{}{}}000{{{b{ce}}}{{d{ce}}}f{h{h{}{{j{c}}}}fl}}{cc{}}02222{{{b{ce}}g}{{b{c{n{eg}}}}}f{{h{}{{j{c}}}}fl}{{h{}{{j{}}}}fl}}{g{{d{ceg}}}{}{}{{h{}{{j{c}}{A`{e}}}}fl}}{e{{b{ce}}}f{{h{}{{j{c}}}}fl}}{{{d{ceg}}c}{{Ab{e}}}{}{}{{h{}{{j{c}}{A`{e}}}}fl}}{c{{Ad{e}}}{}{}}00{c{{Aj{{Ah{Af}}}}}{}}10{cAl{}}099`````999999777999999222211212000999``````99999999{AnAn}{B`B`}{BbBb}{{ce}Bd{}{}}00``{c{{Ad{An}}}Bf}{c{{Ad{B`}}}Bf}{c{{Ad{Bb}}}Bf}{{AnBh}Bj}{{B`Bh}Bj}{{BbBh}Bj}{cc{}}000{BlBb}{BnBb}{C`Bb}{ce{}{}}0000000{CbCd}{{Cdc}{{Aj{{Ah{Af}}}}}{}}`{{Anc}AdCf}{{B`c}AdCf}{{Bbc}AdCf}``555{c{{Ad{e}}}{}{}}0000{c{{Aj{{Ah{Af}}}}}{}}010110{cAl{}}0008888`88<88{CbCh}{{CbCb}Ch}{{Chc}{{Aj{{Ah{Af}}}}}{}}5453;`````;;;;??;;;;``{{{h{}{{j{c}}{A`{e}}}}c}{{Aj{{Ah{Af}}}}}{}{}}{{{n{ce}}g}{{Aj{{Ah{Af}}}}}{hfl}{{h{}{{j{}}}}fl}{}}{{Cjc}{{Aj{{Ah{Af}}}}}{}}88787866>>`>>{cc{}}??{ClCn}{{Cnc}{{Aj{{Ah{Af}}}}}{}};:;9{ce{}{}}","c":[],"p":[[5,"ChainBuilder",5],[5,"Chain",5],[10,"Send",198],[10,"Node",155],[17,"Input"],[10,"Sync",198],[5,"Link",155],[17,"Output"],[8,"Result",199],[6,"Result",200],[10,"Future",201],[5,"Box",202],[5,"Pin",203],[5,"TypeId",204],[5,"ClaudeImageSource",69],[5,"ClaudeMessageContent",69],[5,"ClaudeMessage",69],[1,"unit"],[10,"Deserializer",205],[5,"Formatter",206],[8,"Result",206],[5,"AssisnantChatMessage",32],[5,"UserChatMessage",32],[6,"ChatMessage",32],[5,"String",207],[5,"Claude3Bedrock",69],[10,"Serializer",208],[5,"Gpt3_5Turbo",141],[5,"End",155],[1,"str"],[5,"Prompt",185]],"b":[[99,"impl-From%3CAssisnantChatMessage%3E-for-ClaudeMessage"],[100,"impl-From%3CUserChatMessage%3E-for-ClaudeMessage"],[101,"impl-From%3CChatMessage%3E-for-ClaudeMessage"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
